employee table:
CREATE TABLE employee(
    emp_id VARCHAR(10) NOT NULL PRIMARY KEY,
    emp_name VARCHAR(45) NOT NULL,
    dept_id VARCHAR(10) NOT NULL, 
    type_of_work VARCHAR(1) NOT NULL,
    hourly_rate INT DEFAULT NULL,
    FOREIGN KEY (dept_id) REFERENCES dept(dept_id)
    )DEFAULT CHARACTER SET utf8;
trigger:
DROP TRIGGER IF EXISTS before_employee_insert;

DELIMITER $$
CREATE TRIGGER before_employee_insert
	BEFORE INSERT ON employee
    FOR EACH ROW
    BEGIN
    	IF((NEW.type_of_work != 'F') AND (NEW.type_of_work != 'P'))
        	THEN
            	SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'Type of work can be either F or P.';
        END IF;
    	IF((NEW.type_of_work = 'P') AND (NEW.hourly_rate NOT BETWEEN 25 AND 60))
        	THEN
            	SIGNAL SQLSTATE '45001'
                SET MESSAGE_TEXT = 'Hourly rate have to be between $25 and $60.';
        END IF;
	IF((NEW.type_of_work = 'P') AND (NEW.hourly_rate IS NULL)
        	THEN
            	SIGNAL SQLSTATE '45002'
                SET MESSAGE_TEXT = 'Hourly rate have to be specified.';
        END IF;
        IF((NEW.type_of_work = 'F') AND (NEW.hourly_rate IS NOT NULL)
        	THEN
            	SIGNAL SQLSTATE '45003'
                SET MESSAGE_TEXT = 'Full time workers cannot have hourly rate.';
        END IF;
    END;
    $$
DELIMITER ;
input:
INSERT INTO employee(emp_id, emp_name, dept_id, type_of_work)
VALUES("1603001", "Shegufa", "001", "F"),
	  ("1603002", "Nasif", "002", "F"),
      ("1603004", "Muntashir", "004", "F"),
      ("1603007", "Yamin", "001", "F"),
      ("1603008", "Siam", "002", "F"),
      ("1603011", "Fatin", "004", "F"),
      ("1603013", "Riyad", "001", "F"),
      ("1603015", "Nahid", "002", "F"),
      ("1603016", "Mridul", "003", "F"),
      ("1603017", "Shithi", "004", "F"),
      ("1603018", "Azmal", "005", "F"),
      ("1603021", "Abir", "002", "F"),
      ("1603022", "Utshob", "003", "F"),
      ("1603023", "Sabu", "004", "F"),
      ("1603024", "Asha", "005", "F"),
      ("1603025", "Durlov", "006", "F"),
      ("1603026", "Naj", "001", "F");

INSERT INTO employee
VALUES("1603003", "Hasib", "003", "P", 45),
	  ("1603005", "Shamiul", "005", "P", 26),
      ("1603006", "Rakib", "006", "P", 59),
      ("1603009", "Mustafiz", "003", "P", 55),
      ("1603012", "Mrinmoy", "005", "P", 30),
      ("1603014", "Jarir", "006", "P", 26),
      ("1603019", "Sporsho", "006", "P", 45),
      ("1603020", "Shohanur", "001", "P", 40);

dept table:
CREATE TABLE dept(
    dept_id VARCHAR(10) NOT NULL PRIMARY KEY,
    dept_name VARCHAR(15) NOT NULL,
    dept_location VARCHAR(20) NOT NULL
    )DEFAULT CHARACTER SET utf8;
input:
INSERT INTO dept
VALUES("001", "Engineering", "Canberra"),
	  ("002", "Foreman", "Googong"),
      ("003", "Labor", "Canberra"),
      ("004", "Caretaker", "Googong"),
      ("005", "Carpenter", "Canberra"),
      ("006", "Driver", "Googong");

address table:
CREATE TABLE address(
    emp_id VARCHAR(10) NOT NULL,
    street_no VARCHAR(10) NOT NULL,
    street_name VARCHAR(25) NOT NULL,
    city VARCHAR(15) NOT NULL,
    zip_code INT NOT NULL,
    FOREIGN KEY (emp_id) REFERENCES employee(emp_id)
    )DEFAULT CHARACTER SET utf8;
input:


project table:
CREATE TABLE project(
    project_id VARCHAR(5) NOT NULL PRIMARY KEY,
    project_name VARCHAR(25) NOT NULL,
    project_location VARCHAR(25) NOT NULL
    )DEFAULT CHARACTER SET utf8;
input:
INSERT INTO project
VALUES("001", "Googong Subdivision", "Googong"),
	  ("002", "Googong Highway", "Googong"),
      ("003", "Burton Subdivision", "Burton Canberra"),
      ("004", "Burton Highway", "Burton Canberra");

ft_pt_work table:
CREATE TABLE ft_pt_work(
    project_id VARCHAR(5) NOT NULL,
    emp_id VARCHAR(10) NOT NULL,
    dept_id VARCHAR(10) NOT NULL,
    num_of_hours INT NOT NULL,
    works_date DATE NOT NULL,
    FOREIGN KEY (project_id) REFERENCES project(project_id),
    FOREIGN KEY (emp_id) REFERENCES employee(emp_id),
    FOREIGN KEY (dept_id) REFERENCES dept(dept_id)
    )DEFAULT CHARACTER SET utf8;
input:
INSERT INTO ft_pt_work
VALUES ('001', '1603001', '001', '8', '2019-08-01'),
	('002', '1603001', '001', '7', '2019-08-02'),
	('003', '1603001', '001', '8', '2019-08-03'),
	('001', '1603001', '001', '7', '2019-08-04'),
	('002', '1603002', '002', '6', '2019-08-05'),
	('004', '1603002', '002', '7', '2019-08-07'),
	('003', '1603002', '002', '8', '2019-08-06'),
	('002', '1603004', '004', '8', '2019-08-08'),
	('001', '1603004', '004', '7', '2019-08-10'),
	('004', '1603004', '004', '5', '2019-08-13'),
	('001', '1603007', '001', '8', '2019-08-06'),
	('002', '1603007', '001', '5', '2019-08-08'),
	('003', '1603007', '001', '6', '2019-08-09'),
	('004', '1603008', '002', '7', '2019-08-08'),
	('004', '1603008', '002', '7', '2019-08-01'),
	('002', '1603008', '002', '5', '2019-08-02'),
	('004', '1603011', '004', '4', '2019-08-01'),
	('002', '1603011', '004', '8', '2019-08-03'),
	('004', '1603011', '004', '7', '2019-08-04'),
	('001', '1603013', '001', '8', '2019-08-01'),
	('002', '1603013', '001', '8', '2019-08-02'),
	('003', '1603013', '001', '8', '2019-08-03'),
	('004', '1603015', '002', '7', '2019-08-05'),
	('001', '1603015', '002', '8', '2019-08-06'),
	('002', '1603015', '002', '7', '2019-08-07'),
	('003', '1603016', '003', '8', '2019-08-09'),
	('004', '1603016', '003', '7', '2019-08-10'),
	('001', '1603016', '003', '7', '2019-08-11'),
	('003', '1603017', '004', '7', '2019-08-12'),
	('003', '1603017', '004', '7', '2019-08-02'),
	('001', '1603018', '005', '6', '2019-08-01'),
	('002', '1603018', '005', '7', '2019-08-02'),
	('003', '1603018', '005', '5', '2019-08-03'),
       ('004', '1603019', '006', '3', '2019-08-13'),
       ('001', '1603019', '006', '4', '2019-08-03'),
       ('002', '1603019', '006', '5', '2019-08-23'),
       ('003', '1603020', '001', '5', '2019-08-01'),
       ('004', '1603020', '001', '7', '2019-08-11'),
       ('001', '1603020', '001', '6', '2019-08-21'),
       ('002', '1603021', '002', '8', '2019-08-02'),
       ('003', '1603021', '002', '8', '2019-08-12'),
       ('004', '1603021', '002', '8', '2019-08-22'),
       ('001', '1603022', '003', '5', '2019-08-03'),
       ('002', '1603022', '003', '6', '2019-08-13'),
       ('003', '1603022', '003', '7', '2019-08-23'),
       ('001', '1603023', '004', '4', '2019-08-01'),
       ('002', '1603023', '004', '3', '2019-08-11'),
       ('003', '1603023', '004', '7', '2019-08-21'),
       ('004', '1603024', '005', '8', '2019-08-02'),
       ('001', '1603024', '005', '8', '2019-08-22'),
       ('002', '1603024', '005', '8', '2019-08-12');

salary table:
CREATE TABLE salary(
    emp_id VARCHAR(10) NOT NULL,
    basic INT,
    net_salary INT AS (basic * 1.21),
    salary_date DATE NOT NULL,
    FOREIGN KEY (emp_id) REFERENCES employee(emp_id)
    )DEFAULT CHARACTER SET utf8;
trigger:
DROP TRIGGER IF EXISTS before_salary_insert;

DELIMITER $$
CREATE TRIGGER before_salary_insert
	BEFORE INSERT ON salary
    FOR EACH ROW
    BEGIN
    	IF((SELECT employee.type_of_work FROM employee WHERE employee.emp_id = NEW.emp_id) = 'P')
        	THEN
            	SET NEW.basic = (SELECT employee.hourly_rate FROM employee WHERE employee.emp_id = NEW.emp_id) * (SELECT SUM(ft_pt_work.num_of_hours) FROM ft_pt_work WHERE ft_pt_work.emp_id = NEW.emp_id);
        END IF;
        IF(((SELECT employee.type_of_work FROM employee WHERE employee.emp_id = NEW.emp_id) = 'F') AND NEW.basic < 5000)
        	THEN
            	SIGNAL SQLSTATE '46001'
                SET MESSAGE_TEXT = 'Basic for full-time worker cannot be less than $5000.';
        END IF;
    END;
    $$
    
DELIMITER ;
input:
INSERT INTO `salary` (`emp_id`, `basic`, `salary_date`)
VALUES ('1603001', '10000', '2019-09-01'),
	('1603002', '8000', '2019-09-01'),
	('1603004', '7500', '2019-09-02'),
	('1603007', '6000', '2019-09-02'),
	('1603008', '8000', '2019-09-01'),
	('1603011', '7500', '2019-09-02'),
	('1603013', '9000', '2019-09-01'),
	('1603015', '6500', '2019-09-03'),
	('1603016', '8500', '2019-09-02'),
	('1603017', '10500', '2019-09-03'),
	('1603018', '12000', '2019-09-01'),
	('1603019', NULL, '2019-09-05'),
	('1603020', NULL, '2019-09-08'),
	('1603021', '10000', '2019-09-03'),
	('1603022', '7500', '2019-09-04'),
	('1603023', '6000', '2019-09-02'),
	('1603024', '8000', '2019-09-03'),
	('1603025', '6500', '2019-09-03');

tasks:
01. SELECT DISTINCT(employee.emp_name)
FROM employee, dept, project, ft_pt_work
WHERE project.project_name = "Googong Subdivision" AND
	  ft_pt_work.project_id = project.project_id AND
      dept.dept_id = ft_pt_work.dept_id AND
	  dept.dept_name = "Engineering" AND
	  employee.emp_id = ft_pt_work.emp_id;

02. SELECT employee.emp_name
FROM employee, dept, project, ft_pt_work
WHERE dept.dept_name = "Labor" AND
	  ft_pt_work.dept_id = dept.dept_id AND
      project.project_id = ft_pt_work.project_id AND
      project.project_name = "Googong Subdivision" AND
      employee.emp_id = ft_pt_work.emp_id AND
	  ft_pt_work.works_date BETWEEN '2019-08-01' AND '2019-08-07'
HAVING SUM(ft_pt_work.num_of_hours)>20;

03. SELECT DISTINCT(employee.emp_name), CONCAT(address.street_no, ', ', address.street_name, ', ', address.city, ', ', address.zip_code) AS Address
FROM employee, address, dept, project, ft_pt_work
WHERE project.project_location = "Burton Canberra" AND
	  project.project_id = ft_pt_work.project_id AND
      ft_pt_work.dept_id = dept.dept_id AND
      dept.dept_location != "Canberra" AND
      ft_pt_work.emp_id = employee.emp_id AND
      address.emp_id = employee.emp_id;

04. SELECT DISTINCT(employee.emp_name)
FROM employee, project, ft_pt_work
WHERE project.project_name="Googong Subdivision" AND
      ft_pt_work.project_id=project.project_id AND
      employee.emp_id=ft_pt_work.emp_id AND
      employee.emp_name IN (
          SELECT employee.emp_name
          FROM employee, project, ft_pt_work
          WHERE project.project_name="Burton Highway" AND
                ft_pt_work.project_id=project.project_id AND
                employee.emp_id=ft_pt_work.emp_id);

05. CREATE VIEW employee_info AS
SELECT employee.emp_name AS Name,
	   dept.dept_name AS Department,
       employee.type_of_work,
       salary.basic AS Basic,
	   salary.basic*0.45 AS allowance,
       salary.basic*0.24 AS deduction,
       salary.net_salary AS Salary
FROM employee, dept, salary
WHERE dept.dept_id = employee.dept_id AND
	  salary.emp_id = employee.emp_id;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
